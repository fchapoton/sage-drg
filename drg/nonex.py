# -*- coding: utf-8 -*-
from .util import frac
from .util import symbol

sporadic = {
    ("p", ((14, 12), (1, 4))): "WilbrinkBrouwer83",
    ("p", ((16, 12), (1, 6))): "BHMW89",
    ("p", ((21, 18), (1, 7))): "Haemers93",
    ("p", ((30, 21), (1, 14))): "BPR17",
    ("p", ((32, 21), (1, 16))): "AzarijaMarc18",
    ("p", ((38, 27), (1, 18))): "Degraer07",
    ("p", ((40, 27), (1, 20))): "AzarijaMarc16",
    ("p", ((57, 56), (1, 12))): "GavrilyukMakhnev05",
    ("p", ((67, 56), (1, 2))): "BrouwerNeumaier81",
    ("p", ((116, 115), (1, 20))): "Makhnev17",
    ("p", ((153, 120), (1, 60))): "BMPRV18",
    ("p", ((165, 128), (1, 66))): "Makhnev02",
    ("p", ((486, 320), (1, 243))): "Makhnev02",
    ("p", ((5, 4, 3), (1, 1, 2))): "Fon-Der-Flaass93b",
    ("p", ((11, 10, 10), (1, 1, 11))): "LTS89",
    ("p", ((13, 10, 7), (1, 2, 7))): "Coolsaet95",
    ("p", ((18, 12, 1), (1, 2, 18))): [("BCN", "Prop. 12.5.2."),
                                       ("PayneThas", "6.2.2.")],
    ("p", ((20, 10, 10), (1, 1, 2))): "LTS89",
    ("p", ((21, 16, 8), (1, 4, 14))): "Coolsaet05",
    ("p", ((22, 16, 5), (1, 2, 20))): "SumalrojWorawannotai16",
    ("p", ((27, 20, 10), (1, 2, 18))): "BSW16",
    ("p", ((36, 28, 4), (1, 2, 24))): "BSW16",
    ("p", ((39, 24, 1), (1, 4, 39))): "BGK19",
    ("p", ((45, 30, 7), (1, 2, 27))): "GavrilyukMakhnev13",
    ("p", ((52, 35, 16), (1, 4, 28))): "GavrilyukMakhnev12",
    ("p", ((55, 36, 11), (1, 4, 45))): "Gavrilyuk11",
    ("p", ((56, 36, 9), (1, 3, 48))): "Gavrilyuk11",
    ("p", ((69, 48, 24), (1, 4, 46))): "GavrilyukMakhnev12",
    ("p", ((74, 54, 15), (1, 9, 60))): u"CoolsaetJurišić08",
    ("p", ((80, 54, 12), (1, 6, 60))): "KIPR18",
    ("p", ((83, 54, 21), (1, 6, 63))): "GVW19",
    ("p", ((104, 70, 25), (1, 7, 80))): "GVW19",
    ("p", ((105, 102, 99), (1, 2, 35))): "DeBruynVanhove15",
    ("p", ((125, 108, 24), (1, 9, 75))): "GVW19",
    ("p", ((126, 90, 10), (1, 6, 105))): "GVW19",
    ("p", ((130, 96, 18), (1, 12, 117))): u"JurišićVidali17",
    ("p", ((135, 128, 16), (1, 16, 120))): "Vidali18",
    ("p", ((195, 160, 28), (1, 20, 168))): "GVW19",
    ("p", ((203, 160, 34), (1, 16, 170))): "GVW19",
    ("p", ((234, 165, 12), (1, 30, 198))): "Vidali18",
    ("p", ((4818, 4248, 192), (1, 72, 4672))): u"JurišićVidali17",
    ("p", ((5928, 5920, 5888), (1, 5, 741))): "DeBruynVanhove15",
    ("p", ((120939612, 120939520, 120933632), (1, 65, 1314561))):
        "DeBruynVanhove15",
    ("p", ((97571175, 97571080, 97569275), (1, 20, 1027065))):
        "DeBruynVanhove15",
    ("p", ((290116365, 290116260, 290100825), (1, 148, 2763013))):
        "DeBruynVanhove15",
    ("p", ((5, 4, 3, 3), (1, 1, 1, 2))): "Fon-Der-Flaass93a",
    ("p", ((10, 9, 1, 1), (1, 1, 9, 10))): ("BCN", "Prop. 11.4.5."),
    ("p", ((32, 27, 6, 1), (1, 6, 27, 32))): "Soicher17",
    ("p", ((32, 27, 9, 1), (1, 3, 27, 32))): "Soicher17",
    ("p", ((53, 40, 28, 16), (1, 4, 10, 28))): "GVW19",
    ("p", ((56, 45, 20, 1), (1, 4, 45, 56))): ("BCN94", "Thm. 11.4.6."),
    ("p", ((55, 54, 50, 35, 10), (1, 5, 20, 45, 55))): "Vidali18",
    ("p", ((15, 14, 12, 6, 1, 1), (1, 1, 3, 12, 14, 15))):
        "IvanovShpectorov90",
    ("q", ((12, frac(338, 35), frac(39, 25)),
           (1, frac(312, 175), frac(39, 5)))): "GVW19",
    ("q", ((19, frac(128, 9), 10), (1, frac(16, 9), 10))): "GVW19",
    ("q", ((24, 20, frac(36, 11)), (1, frac(30, 11), 24))): "GVW19",
    ("q", ((33, 20, frac(63, 5)), (1, frac(12, 5), 15))): "GVW19",
    ("q", ((35, frac(243, 10), frac(27, 2)), (1, frac(27, 10), frac(45, 2)))):
        "GVW19",
    ("q", ((36, frac(45, 2), frac(45, 2)), (1, frac(3, 2), frac(15, 2)))):
        "GVW19",
    ("q", ((37, 24, 14), (1, 2, 12))): "GVW19",
    ("q", ((40, frac(5043, 203), frac(123, 7)),
           (1, frac(615, 406), frac(164, 7)))): "GVW19",
    ("q", ((45, frac(4761, 148), frac(115, 4)),
           (1, frac(345, 148), frac(69, 4)))): "GVW19",
    ("q", ((47, frac(135, 4), 33), (1, frac(9, 4), 15))): "GVW19",
    ("q", ((48, 30, 29), (1, frac(3, 2), 20))): "GVW19",
    ("q", ((49, 48, frac(644, 75)), (1, frac(196, 75), 42))): "GVW19",
    ("q", ((69, 42, 7), (1, 2, 63))): "GVW19",
    ("q", ((95, 63, 12), (1, 3, 84))): "GVW19",
    ("q", ((114, frac(4761, 65), frac(58121, 1521)),
           (1, frac(11799, 1690), frac(6118, 117)))): "GVW19",
    ("q", ((12, 11, frac(265, 25), frac(36, 11)),
           (1, frac(44, 25), frac(96, 11), 12))): "GVW19",
    ("q", ((21, 20, frac(196, 11), frac(49, 5)),
           (1, frac(35, 11), frac(56, 5), 21))): "GVW19",
    ("q", ((21, 20, frac(364, 19), frac(81, 5)),
           (1, frac(35, 19), frac(24, 5), 21))): "GVW19",
    ("q", ((25, 24, frac(250, 11), frac(185, 9)),
           (1, frac(25, 11), frac(40, 9), 25))): "GVW19",
    ("q", ((27, 26, frac(3240, 133), frac(279, 13)),
           (1, frac(351, 133), frac(72, 13), 27))): "GVW19",
    ("q", ((28, 27, 25, 8), (1, 3, 20, 28))): "GVW19",
    ("q", ((36, 35, frac(405, 13), frac(72, 7)),
           (1, frac(63, 13), frac(180, 7), 36))): "GVW19",
    ("q", ((36, 35, 33, 16), (1, 3, 20, 36))): "GVW19",
    ("q", ((36, 35, frac(4617, 137), frac(144, 7)),
           (1, frac(315, 137), frac(108, 7), 36))): "GVW19",
    ("q", ((36, 35, frac(783, 23), 24), (1, frac(45, 23), 12, 36))): "GVW19",
    ("q", ((38, 37, frac(12635, 351), frac(76, 37)),
           (1, frac(703, 351), frac(1330, 37), 38))): "GVW19",
    ("q", ((45, 44, 36, 5), (1, 9, 40, 45))): "GVW19",
    ("q", ((45, 44, frac(1296, 31), frac(135, 11)),
           (1, frac(99, 31), frac(360, 11), 45))): "GVW19",
    ("q", ((49, 48, frac(686, 15), frac(77, 5)),
           (1, frac(49, 15), frac(168, 5), 49))): "GVW19",
    ("q", ((50, 49, frac(4800, 103), frac(110, 7)),
           (1, frac(350, 103), frac(240, 7), 50))): "GVW19",
    ("q", ((50, 49, frac(625, 13), frac(100, 9)),
           (1, frac(25, 13), frac(350, 9), 50))): "GVW19",
    ("q", ((53, 52, frac(11236, 225), frac(265, 13)),
           (1, frac(689, 225), frac(424, 13), 5))): "GVW19",
    ("q", ((54, 53, frac(567, 11), 12), (1, frac(27, 11), 42, 54))): "GVW19",
    ("q", ((55, 54, frac(352, 7), 15), (1, frac(33, 7), 40, 55))): "GVW19",
    ("q", ((55, 54, frac(1936, 37), frac(77, 3)),
           (1, frac(99, 37), frac(88, 3), 55))): "GVW19",
    ("q", ((65, 64, frac(182, 3), 25), (1, frac(13, 3), 40, 65))): "GVW19",
    ("q", ((66, 65, frac(847, 15), frac(88, 3)),
           (1, frac(143, 15), frac(770, 13), 66))): "GVW19",
    ("q", ((66, 65, frac(2541, 41), frac(44, 3)),
           (1, frac(165, 41), frac(154, 3), 66))): "GVW19",
    ("q", ((66, 65, frac(1463, 23), 24), (1, frac(55, 23), 42, 66))): "GVW19",
    ("q", ((66, 65, frac(1089, 17), frac(88, 3)),
           (1, frac(33, 17), frac(110, 3), 66))): "GVW19",
    ("q", ((73, 72, frac(10658, 155), frac(511, 15)),
           (1, frac(657, 155), frac(584, 15), 73))): "GVW19",
    ("q", ((73, 72, frac(21316, 301), frac(365, 21)),
           (1, frac(657, 301), frac(1168, 21), 73))): "GVW19",
    ("q", ((75, 74, frac(1200, 17), 35), (1, frac(75, 17), 40, 75))): "GVW19",
    ("q", ((77, 76, frac(3872, 53), frac(231, 19)),
           (1, frac(209, 53), frac(1232, 19), 77))): "GVW19",
    ("q", ((78, 77, 65, 8), (1, 13, 70, 78))): "GVW19",
    ("q", ((78, 77, frac(507, 7), frac(52, 3)),
           (1, frac(39, 7), frac(182, 3), 78))): "GVW19",
    ("q", ((78, 77, frac(3211, 43), frac(312, 11)),
           (1, frac(143, 43), frac(546, 11), 78))): "GVW19",
    ("q", ((78, 77, frac(7605, 101), frac(104, 3)),
           (1, frac(273, 101), frac(130, 3), 78))): "GVW19",
    ("q", ((78, 77, frac(377, 5), 36), (1, frac(13, 5), 42, 78))): "GVW19",
    ("q", ((85, 84, frac(1156, 15), frac(187, 7)),
           (1, frac(119, 15), frac(408, 7), 85))): "GVW19",
    ("q", ((85, 84, frac(884, 11), 45), (1, frac(51, 11), 40, 85))): "GVW19",
    ("q", ((86, 85, frac(12943, 159), frac(1376, 51)),
           (1, frac(731, 159), frac(3010, 51), 86))): "GVW19",
    ("q", ((88, 87, frac(429, 5), 16), (1, frac(11, 5), 72, 88))): "GVW19",
    ("q", ((90, 89, frac(1125, 13), 40), (1, frac(45, 13), 50, 90))): "GVW19",
    ("q", ((91, 90, frac(2704, 31), frac(65, 3)),
           (1, frac(117, 31), frac(208, 3), 91))): "GVW19",
    ("q", ((91, 90, frac(1664, 19), frac(119, 5)),
           (1, frac(65, 19), frac(336, 5), 91))): "GVW19",
    ("q", ((100, 99, frac(12800, 137), frac(140, 3)),
           (1, frac(900, 137), frac(160, 3), 100))): "GVW19",
    ("q", ((100, 99, frac(19200, 203), frac(620, 11)),
           (1, frac(1100, 203), frac(480, 11), 100))): "GVW19",
    ("q", ((103, 102, frac(84872, 875), frac(927, 17)),
           (1, frac(5253, 875), frac(824, 17), 103))): "GVW19",
    ("q", ((105, 104, 98, 49), (1, 7, 56, 105))): "GVW19",
    ("q", ((105, 104, 100, 25), (1, 5, 80, 105))): "GVW19",
    ("q", ((105, 104, frac(4320, 43), frac(357, 13)),
           (1, frac(195, 43), frac(1008, 13), 105))): "GVW19",
    ("q", ((105, 104, frac(17500, 171), frac(165, 13)),
           (1, frac(455, 171), frac(1200, 13), 105))): "GVW19",
    ("q", ((106, 105, frac(2809, 29), frac(212, 9)),
           (1, frac(265, 29), frac(742, 9), 106))): "GVW19",
    ("q", ((106, 105, frac(901, 9), 36), (1, frac(53, 9), 70, 106))): "GVW19",
    ("q", ((106, 105, frac(8427, 83), frac(424, 9)),
           (1, frac(371, 83), frac(530, 9), 106))): "GVW19",
    ("q", ((117, 116, frac(6760, 61), frac(273, 29)),
           (1, frac(377, 61), frac(3120, 29), 117))): "GVW19",
    ("q", ((119, 118, frac(13872, 125), frac(1309, 59)),
           (1, frac(1003, 125), frac(5712, 59), 119))): "GVW19",
    ("q", ((121, 120, frac(5324, 49), frac(77, 5)),
           (1, frac(605, 49), frac(528, 5), 121))): "GVW19",
    ("q", ((126, 125, frac(343, 3), 28), (1, frac(35, 3), 98, 126))): "GVW19",
    ("q", ((126, 125, frac(1323, 11), 56), (1, frac(63, 11), 70, 126))):
        "GVW19",
    ("q", ((133, 132, frac(608, 5), 21), (1, frac(57, 5), 112, 133))): "GVW19",
    ("q", ((134, 133, frac(22445, 177), frac(2948, 57)),
           (1, frac(1273, 177), frac(4690, 57), 134))): "GVW19",
    ("q", ((147, 146, frac(2352, 17), 35), (1, frac(147, 17), 112, 147))):
        "GVW19",
    ("q", ((153, 152, 136, 9), (1, 17, 144, 153))): "GVW19",
    ("q", ((153, 152, frac(8092, 55), frac(459, 19)),
           (1, frac(323, 55), frac(2448, 19), 153))): "GVW19",
    ("q", ((161, 160, frac(460, 3), 49), (1, frac(23, 3), 112, 161))): "GVW19",
    ("q", ((171, 170, frac(11552, 77), frac(171, 17)),
           (1, frac(1615, 77), frac(2736, 17), 171))): "GVW19",
    ("q", ((171, 170, frac(2128, 13), 27), (1, frac(95, 13), 144, 171))):
        "GVW19",
    ("q", ((184, 183, 161, 16), (1, 23, 168, 184))): "GVW19",
    ("q", ((190, 189, frac(3971, 23), frac(76, 7)),
           (1, frac(399, 23), frac(1254, 7), 190))): "GVW19",
    ("q", ((210, 209, 189, 12), (1, 21, 198, 210))): "GVW19",
    ("q", ((217, 216, frac(3844, 19), frac(155, 3)),
           (1, frac(279, 19), frac(496, 3), 217))): "GVW19",
    ("q", ((232, 231, frac(32799, 151), frac(464, 11)),
           (1, frac(2233, 151), frac(2088, 11), 232))): "GVW19",
    ("q", ((261, 260, 232, 21), (1, 29, 240, 261))): "GVW19",
    ("q", ((325, 324, 300, 13), (1, 25, 312, 325))): "GVW19",
    ("q", ((351, 350, frac(52488, 163), frac(351, 25)),
           (1, frac(4725, 163), frac(8424, 25), 351))): "GVW19",
    ("q", ((21, 20, 18, frac(21, 2), frac(27, 7)),
           (1, 3, frac(21, 2), frac(120, 7), 21))): "GVW19",
    ("q", ((22, 21, 20, frac(88, 5), frac(32, 11)),
           (1, 2, frac(22, 5), frac(210, 11), 22))): "GVW19",
    ("q", ((25, 24, frac(625, 27), frac(50, 3), frac(25, 9)),
           (1, frac(50, 27), frac(25, 3), frac(200, 9), 25))): "GVW19",
    ("q", ((116, 115, 112, frac(696, 7), frac(144, 29)),
           (1, 4, frac(116, 7), frac(3220, 29), 116))): "GVW19",
    ("q", ((121, 120, frac(14641, 125), frac(484, 5), frac(121, 25)),
           (1, frac(484, 125), frac(121, 5), frac(2904, 25), 121))): "GVW19"
}

r = symbol("__r")
t = symbol("__t")

families = {
    ("p", ((r**2*(r+3), (r+1)*(r**2+2*r-2)), (1, r*(r+1)))):
        ([r >= 3, r != 4], "BondarenkoRadchenko13"),
    ("p", (((2*r**2 - 1)*(2*r+1), 4*r*(r**2-1), 2*r**2),
     (1, 2*(r**2-1), r*(4*r**2-2)))): (r >= 2, u"JurišićVidali12"),
    ("p", ((2*r**2*(2*r+1), (2*r-1)*(2*r**2+r+1), 2*r**2),
     (1, 2*r**2, r*(4*r**2-1)))): (r >= 2, u"JurišićVidali12"),
    ("p", ((4*r**3 + 8*r**2 + 6*r + 1, 2*r*(r+1)*(2*r+1), 2*r**2 + 2*r + 1),
     (1, 2*r*(r+1), (2*r+1)*(2*r**2+2*r+1)))): (r >= 1, u"CoolsaetJurišić08"),
    ("p", (((2*r+1)*(4*r+1)*(4*t-1), 8*r*(4*r*t-r+2*t), (r+t)*(4*r+1)),
     (1, (r+t)*(4*r+1), 4*r*(2*r+1)*(4*t-1)))): ([r >= 1, t >= 1], "Vidali18"),
    ("p", (((r+1)*(r**3-1), r*(r-1)*(r**2+r-1), r**2-1),
     (1, r*(r+1), (r**2-1)*(r**2+r-1)))): (r >= 3, "Urlep12"),
    ("p", ((r**2*(r*t+t+1), (r**2-1)*(r*t+1), r*(r-1)*(t+1), 1),
     (1, r*(t+1), (r**2-1)*(r*t+1), r**2*(r*t+t+1)))):
         ([r >= 3, (r != 3, [t != 1, t != 3]), (r != 4, t != 2)],
          u"JurišićKoolen11"),
    ("p", ((2*r**2+r, 2*r**2+r-1, r**2, r, 1),
           (1, r, r**2, 2*r**2+r-1, 2*r**2+r))):
        (r >= 2, "CJK08"),
    ("q", ((8*r**2+8*r+1, 8*r**2+8*r, 4*r**2+4*r+2), (1, 2, 4*r**2+4*r))):
        (r >= 1, "GVW19"),
    ("q", ((r**2-4, r**2-9, 9, 1), (1, 3, r**2-9, r**2-4))):
        (r >= 5, "GSV18"),
    ("q", ((2*r+1, 2*r, 4*(2*r+1)*(t**2+t)/(2*t+1)**2, 2*r-4*t**2-4*t+1),
           (1, (2*r+1)/(2*t+1)**2, 4*t**2+4*t, 2*r+1))):
        ([r >= 1, t >= 1], "GVW19"),
    ("q", ((8*r**2-4*r+1, 4*r*(2*r-1), (8*r**2-4*r+1)**2/(2*r*(4*r-1)),
            (8*r**2-4*r+1)*(2*r-1)/(4*r-1), (8*r**2-4*r+1)/(4*r-1)),
           (1, (8*r**2-4*r+1)*(2*r-1)/(2*r*(4*r-1)),
            2*r*(8*r**2-4*r+1)/(4*r-1), 2*(8*r**2-4*r+1)*(2*r-1)/(4*r-1),
            8*r**2-4*r+1))): (r >= 2, "GVW19")
}

classicalFamilies = {
    (t, -2, -2, ((-2)**(t+1) - 1)/3): (t >= 4, "HPW15"),
    (t, -r, -r/(r-1), r + r**2 * ((-r)**(t-1) - 1) / (r**2-1)):
        ([r >= 2, t >= 4], "DeBruynVanhove15")
}


def checkConditions(cond, sol):
    """
    Check whether the given conditions hold for the given values of variables.
    """
    if isinstance(cond, list):
        return all(checkConditions(cnd, sol) for cnd in cond)
    elif isinstance(cond, tuple):
        return any(checkConditions(cnd, sol) for cnd in cond)
    else:
        return cond.subs(sol)
